DCASM	v0.51
　　　　　　　　　　　　　　　　　　　　　by Masashi KITAMURA (tenka@6809.net)


バイナリ・データの生成を目的として、
　　68kアセンブラでの dc.b dc.w dc.l (dc.q)
　　x86アセンブラでの db dw dd (dq)
のみをサポートしたマクロアセンブラ。

xdef された外部ラベルを、C言語の .h ヘッダのように
#define ラベル  アドレス
の形で生成することができる。

マクロ機能は #include #define #if  #macro #rept #ipr 等がある。



□使いかた

usage> dcasm [-opt] filename(s)
  
  ファイル名が複数指定された場合、一連のテキストとして順に読みこむ.
  出力ファイル名は最初のファイル名の拡張子を.binにしたもの

オプション：
  -iDIR          ヘッダファイルの入力ディレクトリの指定
  -oFILE         結果を FILE に出力.
  -eFILE         エラーを FILE に出力
  -b<B|L>        デフォルトのエンディアンをB=ビッグ, L=リトルにする
  -a<0|2|4|8>    アライメント最大バイト数(0:調整無)
                 ex)-a2ならdc.l,dc.qも2byte単位
  -rFILE         一番目に読込むファイルを指定
                 (ルール/マクロ定義の記述ファイルを想定)
  -dNAME[=STR]   #define名定義
  -uNAME         #undefする
  -hFILE         xdefされたラベルを#define形式でファイルに出力する
  -y             文字列中, C言語の\エスケープシーケンスを有効  -y- 無効
  -s             ;をコメント開始文字でなく複文用のセパレータとして扱う
  -m             命令(文法)ヘルプ表示
  -c[UTF8|MBC|SJIS|EUCJP]
                 入力ソースの文字コード指定(必ずその形式のテキストであること)
                 MBC は Win-API使用で日本語WindowsならばSJIS.
  -v[-]          途中経過メッセージを表示する -v-しない
  @FILE          レスポンス・ファイル指定



■　文法関係

□ソーステキスト
　-c, char_enc で文字エンコーディングを指定すればその形式、なければ
　asciiを想定.
　指定がない場合はなるべくバイト列ままを扱うが、SJIS系は全角2バイト
　目の \ の問題があるのでなるべく MBC|SJIS を指定のこと。
　文字エンコードの変換は行わないので指定のエンコードと実際のテキスト
　が一致すること。

　文字エンコード指定時は dc.w dc.l dc.q で"文字列"を指定すると
　1文字 1データの生成になる。無指定だと 1byte 1データ。
　sjis,eucjpはバイト列を(big endianで)そのまま整数化した値になるが、
　utf8の場合はutf32の値になる。
　dc.w では 単純に0x10000以上の文字は上位切捨てなので注意。
　(unicodeや eucjpでありえる)


□コメント
　; か * か // か rem で始まり行末までか /* */ で囲まれた範囲。
　ただし ; はオプションで、文を区切るセパレータになり、その場合は
コメントにならない。


□数値
10進数数値      0..9か_で構成される文字列. _は無視.
16進数数値      C言語風0x0, インテル風0h, モトローラ風$0
 2進数数値      C言語風拡張0b011、インテル風 011h 表記. モトローラ風表記%011
 8進数数値      指定できない


□演算子
　演算順位を含め、ほぼＣと同じで下記のものがある。  
        単項- 単項+ ()  ~ !
        * / %
        + -
        >> <<
        > >= < <=
        == !=
        &
        ^
        |
        &&
        ||

また、アセンブラとして、ソース行頭アドレス値を示す  
     $ または 単項*  
がある。


□エスケープ文字 (""''中の\文字)
    '文字定数'、"文字列"中で指定できる特殊機能文字.
            コード  役目
    \n      0a      LF.
    \r      0d      CR.
    \N      0d0a    \r\n におなじ.
    \a      07      アラーム.
    \b      08      BS.
    \f      0c      改項.
    \e      1b      エスケープシーケンス文字.
    \t      09      タブ.
    \v      0b      垂直タブ.
    \\      5c      \自身.
    \'      27      '自身.
    \"      22      "自身.
    \0      00      文字コード 0.
    \OOO            O は 8進数文字. 3桁まで.
    \xHH            H は16進数文字. 2桁まで.
    \XHHHH          H は16進数文字. 8桁まで.


□ラベル定義

LBL:            ラベル LBL を定義
LBL: equ N      ラベル LBL の値を N にする

　equ であっても、ラベルを指定するには必ず : が必要ということは注意。
（逆に:があれば行頭空白があってもラベルと認識）

ラベルは基本的には 英数,'_' 。文字エンコーディング指定時は
その文字エンコーディングのascii外の文字が使用可能。
※ -cなく char_enc 指定の場合は char_enc 以前の行では不可。


□外部ラベル
  xdef LBL
  xdef LBL1,LBL2 ……
指定したラベルは、-h[FILE] で指定ファイルに #define 定義で出力。


□dc.<b|w|l|q>    db dw dd dq
　1/2/4/8バイト整数列のデータ生成。
　文字列も指定できる。その場合は文字(バイト)数分生成される。
　文字エンコード未指定時は dc.w,dc.l,dc.q でも1バイト 1データになる。
　文字エンコード指定時は、dc.w,dc.l,dc.q は1文字 1データ。
　(※ただし dc.w で0x10000以上の文字は & 0xffff した値になる)


□ds.<b|w|l|q> N 
  N個の領域を確保(0埋め)


□stri
　stri の次行から、違う命令(行)が現れるまでを
    dc.b "文字列",0 
相当の文字列データとして生成。
テキスト中の改行コード等もそのままバイナリ化。
"文字列" の中とは違い #define したマクロの置換が有効。


□ org N
　アドレスを Nにします。
　アドレスまでの隙間は0で埋められる。


□even
　アドレスが偶数になるよう調整(隙間は0埋め)


□align N
　アドレスがNバイト単位になるよう調整


□auto_align 2|4|8
　2　　dc.w,dc.lでアドレスを偶数(68Kの事情を想定)でアライメント
　4　　dc.w なら偶数、 dc.l, dc.q 4の倍数でアライメント
　8　　dc.w なら偶数、 dc.l なら4の倍数、dc.q なら8の倍数でアライメント


□エンディアンの指定
big_endian      ビッグ・エンディアンにする
little_endian   リトル・エンディアンにする


□ char_enc UTF8|MBC|SJIS|EUCJP
　文字エンコード指定.
　MBC はWindows-APIによる処理。日本語Windows環境なら SJIS。


□end
　ソースの終わり(なくてもよい)



■プリプロセッサ機能(#マクロ命令)

　#if,#elif,#else,#endif
　#define,
　#macro,#exitm,#endm(#exitmacro,#endmacro)
　#rept,#endr(#endrept)
　#ipr,#endi(#endipr)

等の条件アセンブルやマクロ命令ある。
(拙作 acpp の機能を内蔵)

マクロ名は 基本的に 英数 _。
-cで文字エンコードを指定した時はascii以外の文字を名前に使える。
※ char_enc を処理する前にプリプロセスされるので char_enc では反映されない


○ 条件コンパイル #if文
      ・#if 式
           :
           :
        #endif
        式の計算を行った結果、0以外ならば #if〜#endifの間の文を生成.

      ・#if 式
           :
           :
        #else
           :
           :
        #endif

        式の計算を行った結果、0以外ならば #if〜#elseの間の文を,0ならば
        #else〜#endif の間の文を生成.

      ・#if 式1
           :
           :
        #elif 式2
           :
           :
        #elif 式3
           :
           :
        #else
           :
           :
        #endif

      #if,#elif(複数可)の式を上から順に計算し、初めて0以外だったらその間の
      テキストを生成、すべて0で#elseがあればelse範囲を生成。

      (条件)式の計算は、符号付き64ビット整数で行われる。

    ・#ifdef LBL ,#ifndef LBL
      #ifの替りに用いられる.
      #ifdef  LBL は LBL が定義されていれば真になる。#if defined(LBL)に同じ
      #ifndef LBL は LBL が未定義ならば真になる。    #if !defined(LBL)に同じ

○ #define
        #define ラベル名        文字列
        #define ラベル名(引数)  文字列

        ラベル名が使われると 対応する文字列に置換。
        引数があれば、変換文字列中の引数名が、指定された引数と置換される。

○ #undef
        #undef ラベル名
        ラベルが #define,#set,#macro で設定された名前ならば、未定義状態に
        戻す。未定義のラベルの場合は何もしない。

        ※#reptや#iprの中で ラベルを再定義するために, #defineとペアにして
          #rept,#ipr中に用いないこと。展開順序の都合により意図通りに展開
          できない。(バグですが仕様)

○ #set
        #set ラベル名 = 定数式
        この行で定数式が計算され、ラベル名が使われると数字列に置き換る。
        #define と違い #set は同じラベル名に対し何度でも行うことができる。

○ #macro
      ・#macro マクロ名
                :
                :
        #endmacro または #endm

        #macro マクロ名(引数名1, 引数名2)
                #local ラベル1,ラベル2
                :
                :
                #exitmacro または #exitm
                :
                :
        #endmacro

        マクロを定義。マクロ名がつかわれると、
        #macro〜#endmacro(#endm)までの内容を生成.

        引数付きで宣言すれば、引数名が置換されます。

        #exitmacro(#exitm) で、マクロの展開を中止できる。

        また、#if,#rept,#iprをその内側で使用可能。

        #local 文でラベル定義すると、指定されたラベル名は、
        展開時に、衝突しないよう別の名前を生成。
        ※ 現状 _LBL_数字 のような名前になる

      ・#macro
                #local ラベル1,ラベル2
                :
                :
        #endmacro
        マクロ名の無い場合、その場でマクロ展開します。
        特定範囲で#local命令を使いたい場合を想定。

○ #rept
      ・#rept 回数
                :
                :
        #endrept または #endr

        #rept〜#endrept(#endr) の間の行を 指定回数生成.

      ・#rept ラベル名=回数
                :
                :
        #endrept

        #rept〜#endreptの間の行を 指定回数生成、その回数をラベル名で参照可。
        番号は 0..n-1まで。
        ネスト可能。

○ #ipr
        #ipr ラベル名=置換1,置換2,・・・置換n
                :
                :
        #endipr

        #ipr 〜 #endipr の中を置換文字列がある間繰り返す。
        ラベル名は、各ループに対応する置換文字列によって置換される。
        ネスト可能。

○ #error
        #error 文字列
        エラーメッセージ用. 文字列を標準エラー出力。

○ #print
        #print 文字列
        デバッグ用。文字列を標準出力。

○ 無視する#命令
        #file #line #pragma

○行頭以外での#の機能
        #で始まる行かマクロ中では、cと同様 #,## が特殊な働きをする。

        #NO の場合、"NO" を生成。
        str##NO の場合, strNO のように連結。
        もし NO がマクロまたはマクロの引数の場合で 10が設定されていれば
        #NO は "10"になり, str##NO は str10 になる。

        Cにはない機能として #(定数式) で定数式の計算結果の値の文字列を生成。
        たとえば #(0x20*10) ならば 320 に置換。
        ただしこれも#行やマクロ内のみ。

○ 特殊マクロ名
        __FILE__    現在のファイル名
        __LINE__    現在の行数
        __DATE__    現在の日付
        __TIME__    現在の時間
        ※Cプリプロセッサににあるのと同様



■履歴

v0.4  2000/09
　filn.c ルーチンの修正変更に伴う更新。
　-erFILE を -eFILE に、
　-eb を -bb に、
　-l  を -bl
　に変更。


v0.5  2017/08
　dc.q 等 64bit整数対応.
　UTF8対応
　ライセンス変更

v0.51 2017/08
　char_enc 追加.



■その他

　Boost Software License Version 1.0


gitリポジトリは
    https://github.com/tenk-a/dcasm/
