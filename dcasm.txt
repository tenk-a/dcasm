DCASM	v0.50
　　　　　　　　　　　　　　　　　　　　　by Masashi KITAMURA (tenka@6809.net)


  バイナリ・データ生成を目的として、
　68kアセンブラでの dc.b dc.w dc.l (dc.q) のみ と、
　x86アセンブラでの db dw dd (dq) のみ
をサポートしたマクロアセンブラです。

　xdef された外部ラベルを、C言語の .hのごとく、
#define ラベル　アドレス
の形で生成することができます。

　マクロ機能は、#include #define #if  #macro #rept #ipr 等
で、拙作 acpp のプリプロセス機能を内臓しています。



□使いかた

usage> dcasm [-opt] filename(s)
  
  ファイル名が複数指定された場合、一連のテキストとして順に読みこむ.
  出力ファイル名は最初のファイル名の拡張子を.binにしたもの

オプション：
  -iDIR          ヘッダファイルの入力ディレクトリの指定
  -oFILE         結果を FILE に出力.
  -eFILE         エラーを FILE に出力
  -b<B|L>        デフォルトのエンディアンをB=ビッグ, L=リトルにする
  -a<0|2|4|8>    アライメント最大バイト数(0:調整無)
                 ex)-a2ならdc.l,dc.qも2byte単位
  -rFILE         一番目に読込むファイルを指定
                 (ルール/マクロ定義の記述ファイルを想定)
  -dNAME[=STR]   #define名定義
  -uNAME         #undefする
  -hFILE         xdefされたラベルを#define形式でファイルに出力する
  -y             文字列中, C言語の\エスケープシーケンスを有効  -y- 無効
  -s             ;をコメント開始文字でなく複文用のセパレータとして扱う
  -m             命令(文法)ヘルプ表示
  -cMBC          マルチバイト文字(SJIS)対応
  -cUTF8         ユニコード文字(UTF-8)対応
  -v[-]          途中経過メッセージを表示する -v-しない
  @FILE          レスポンス・ファイル指定



■　文法関係

□コメント
　; か * か // か rem で始まり行末までか /* */ で囲まれた範囲。
　ただし ; はオプションで、文を区切るセパレータになり、その場合は
コメントになりません。


□数値
10進数数値      0..9か_で構成される文字列. _は無視.
16進数数値      C言語風0x0, インテル風0h, モトローラ風$0
 2進数数値      C言語風拡張0b011、インテル風 011h 表記. モトローラ風表記%011
 8進数数値      指定できない


□演算子
　演算順位を含め、ほぼＣと同じで下記のものがあります。
 () + - ! ~   * / % + - << >>  > >= < <= == != & ^ | && ||

また、アセンブラとして、
　ソース行頭アドレス値　を示す   $ または 単項*
があります。


□ラベル定義

LBL:            ラベル LBL を定義
LBL: equ N      ラベル LBL の値を N にする

　equ であっても、ラベルを指定するには必ず : が必要ということは
注意してください。
（逆に:があれば行頭空白があってもラベルと認識します）。


□外部ラベル
xdef LBL
と指定したラベルは、.h ファイルに#define定義で出力します。


□dc.<b|w|l|q>　db dw dd dq
　1/2/4/8バイト整数列のデータ生成します。
　文字列も指定できます。その場合は文字(バイト)数分生成されます。
　-c??? 未指定の場合は dc.w,dc.l,dc.q でも1バイト 1データになります。
　-cMBC,-cUTF8 指定時は、dc.w,dc.l,dc.q ならば1文字 1データになります。
　(※ただし -cUTF8でdc.wのとき、utf16のサロゲートペア未対応のため不正な
　　 データに化けます)
　※-cMBC,-cUTF8指定する場合 ソース・ファイルはその文字コードになっている
　　必要があります。


□ds.<b|w|l> N 
  N個の領域を確保(0埋め)


□stri

　stri の次行から、違う命令(行)が現れるまでを、文字列データとして生成します。
dc.b "文字列" の特殊タイプで、"文字列" の中とは違い #define したマクロ
の置換が有効になります。


□ org N
　アドレスを Nにします。
　アドレスまでの隙間は０で埋められます。


□even
　アドレスが偶数になるよう調整(隙間は0埋め)


□align N
　アドレスがNバイト単位になるよう調整


□auto_align 2|4|8
　2　　dc.w,dc.lでアドレスを偶数(68Kの事情を想定)でアライメント
　4　　dc.w なら偶数、 dc.l, dc.q 4の倍数でアライメント
　8　　dc.w なら偶数、 dc.l なら4の倍数、dc.q なら8の倍数でアライメント


□エンディアンの指定
big_endian      ビッグ・エンディアンにする
little_endian   リトル・エンディアンにする


□end
　ソースの終わり(なくてもよい)


□#マクロ命令

　#if,#elif,#elif,#endif
　#define,
　#macro,#endm
　#rept,#endr
　#ipr,#endi

等の条件アセンブルやマクロ命令ありがあります。
詳しくは、別配布の acpp.exe のマニュアルを参照のこと。



■制限等。

　もともとサンプル的に急場ででっち上げたもので、
アセンブラとして考えた場合、生成中のリスト出力が
できないという、結構致命的な仕様になっています。



■履歴

v0.4  2000/09
　filn.c ルーチンの修正変更に伴う更新。
　-erFILE を -eFILE に、
　-eb を -bb に、
　-l  を -bl
　に変更。


v0.5  2017/08
　dc.q 等 64bit整数対応.
　UTF8対応
　ライセンス変更



■  利用条件等

　アプリのライセンスは 二条項BSDライセンス です。
　license.txt を参照のこと。
　※ソースレベルでは、各ソースに書かれたライセンスになります。
　　（Boost Software License Version 1.0 や 二条項BSDライセンス)
